#!/usr/bin/env python3
import concurrent.futures
import multiprocessing
import os, sys, argparse, logging, yaml, asyncio, setproctitle, time, traceback
from pprint import pprint

# XXX: this is for setproctitle
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning) 

DN = os.path.dirname(os.path.abspath(__file__))

sys.path.append(DN + '/src')
from cloudinventario.cloudinventario import CloudInventario
import cloudinventario.storage as storage

# getArgs
def getArgs():
   parser = argparse.ArgumentParser(description='CloudInventory args')
   parser.add_argument('-c', '--config', action='store', required=True,
                       help='Config file')
   parser.add_argument('-l', '--list', action='store_true',
                       help='List collectors')
   parser.add_argument('-n', '--name', action='store',
                       help='Collector to run')
   parser.add_argument('-a', '--all', action='store_true',
                       help='Run all collectors')
   parser.add_argument('-p', '--prune', action='store_true',
                       help='Cleanup old data')
   parser.add_argument('-f', '--forks', action='store', nargs='?', type=int,
                       help='Parallel collectors')
   parser.add_argument('-t', '--tasks', action='store', nargs='?', type=int,
                       help='Parallel tasks per collector')
   parser.add_argument('-v', '--verbose', action='count', default=0,
                       help='Verbose')
   parser.add_argument('--test-login', action='store_true', default=0,
                       help='Testing if configuration is correct')
   parser.add_argument('--check-permission', action='store_true', default=0,
                       help='If credentials do not have permission for resource, resource will be skipped')
   args = parser.parse_args()
   return args

# loadConfig
def loadConfig(config_file):
   with open(config_file) as file:
       return yaml.safe_load(file)
   return None

# collect
def collect(data):
   config = data['config']
   name = data['name']
   options = data['options']

   proctitle = setproctitle.getproctitle()
   setproctitle.setproctitle("[cloudinventario] {}".format(name))
   multiprocessing.current_process().name = name

   cinv = CloudInventario(config)

   logging.info("collector name={}".format(name))
   runtime_start = time.time()
   try:
     # Check if testing login
     if args.test_login:
        return cinv.login(name, options)
     runtime_start = time.time()
     inventory = cinv.collect(name, options)
     runtime = time.time() - runtime_start

     if inventory is not None:
        logging.info("storing data for name={}".format(name))
        cinv.store(inventory, runtime)
        return True
     else:
        cinv.store_status(name, storage.STATUS_FAIL, runtime)
        logging.info("collector failed name={}".format(name))
   except Exception as e:
     runtime = time.time() - runtime_start
     trace = traceback.format_exc()

     cinv.store_status(name,  storage.STATUS_ERROR, runtime, trace)
     logging.error("collector failed with exception", exc_info=e)
     return False
   finally:
     setproctitle.setproctitle(proctitle)
   return False

# main
def main(args):

  # init logging
  level = logging.WARNING
  if args.verbose > 1:
    level = logging.DEBUG
  elif args.verbose > 0:
    level = logging.INFO
  logging.basicConfig(format='%(asctime)s [%(processName)s] [%(levelname)s] %(message)s', level=level)

  # parse config
  config = loadConfig(args.config)
  cinv = CloudInventario(config)

  options = {
    "tasks": args.tasks or 2,
    "check_permission": True if args.check_permission else False
  }

  if args.prune:
    cinv.cleanup(days = 5)

  if args.list:
    for col in cinv.collectors:
      print("{}".format(col))
    return 0
  elif args.name:
    # Check if testing login
    if args.test_login:
      return cinv.login(args.name, options)
    else:
      inventory = cinv.collect(args.name, options) 
      cinv.store(inventory)
      return 0
  elif args.all:
    # force DB setup
    cinv.store(None)

    # execute concurently
    ret = 1
    with concurrent.futures.ProcessPoolExecutor(max_workers = args.forks or 7) as executor:
      data = []
      for col in cinv.collectors:
        data.append({
           "config": config,
           "name": col,
           "options": options
         })

      # if at least one succeeded, its SUCCESS
      for res in executor.map(collect, data):
        if res is True:
          ret = 0
    return ret
  elif args.prune:
    return 0
  else:
    print("No action specified !", file=sys.stderr)
    return 1

# MAIN
args = getArgs()
ret = main(args)
sys.exit(ret)
